{"version":3,"sources":["components/Card.js","components/Header.js","components/GameOver.js","App.js","index.js"],"names":["Card","item","handleClick","orderNumber","name","image","id","style","order","className","onClick","src","alt","Header","score","bestScore","GameOver","resetGame","nextLevel","level","clickedItems","length","App","useState","items","setItems","setClickedItems","isGameOver","setIsGameOver","loading","setLoading","setScore","setBestScore","setLevel","includes","prevScore","fetchItems","a","arr","i","push","arrRandom","map","Math","floor","random","params","join","fetch","response","json","data","useEffect","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a57983ff.chunk.js","sourcesContent":["import React from 'react'\n\nconst Card = ({item, handleClick, orderNumber}) => {\n   const {name, image, id} = item\n   const defaultImg = 'https://rickandmortyapi.com/api/character/avatar/66.jpeg'\n   return (\n      <article style={{order: `${orderNumber}`}} className='card' onClick={() => handleClick(id)} >\n         <img className='img' src={image? image : defaultImg} alt={name} />\n         <h2 className='name'>{name}</h2>\n      </article>\n   )\n}\n\nexport default Card\n","import React from 'react'\n\nconst Header = ({score, bestScore}) => {\n   return (\n      <header className='header'>\n         <h1 className='title'>Rick & Morty<br/>Memory Game</h1>\n         <p className='description'>Get points by clicking on an image but don't click on any more than once!\n         </p>\n         <h3>Score: {score}</h3>\n         <h3>Best-score: {bestScore}</h3>\n         </header>\n   )\n}\n\nexport default Header\n","import React from 'react'\n\nconst GameOver = ({resetGame, nextLevel, level, clickedItems}) => {\n   return (\n      <article className='win-container'>\n         {\n               clickedItems.length === level?\n               <>\n                  <h2 className='win-msg'>You win!</h2>\n                  <button onClick={nextLevel} className='btn'>Next level</button>\n               </>:\n               <>\n                  <h2 className='win-msg'>You lost... try one more time</h2>\n                  <button onClick={resetGame} className='btn'>Play again</button>\n               </>\n            }\n      </article>\n   )\n}\n\nexport default GameOver\n","import React, { useState, useEffect } from 'react'\nimport Card from './components/Card'\nimport Header from './components/Header'\nimport GameOver from './components/GameOver'\n\nconst App = () => {\n  const [items, setItems] = useState([])\n  const [clickedItems, setClickedItems] = useState([])\n  const [isGameOver, setIsGameOver] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [score, setScore] = useState(0)\n  const [bestScore, setBestScore] = useState(0)\n  const [level, setLevel] = useState(4)\n\n  const baseUrl = 'https://rickandmortyapi.com/api/character/'\n\n  const handleClick = (id) => {\n    if(clickedItems.includes(id)) {\n      setIsGameOver(true)\n      return\n    }\n    setClickedItems([...clickedItems, id])\n    setScore((prevScore) => prevScore + 1)\n  }\n\n  const resetGame = () => {\n    setLevel(4) \n    setScore(0)\n    setClickedItems([])\n    setIsGameOver(false)\n  }\n\n  const nextLevel = () => {\n    setLevel(level + 1)\n    setClickedItems([])\n    setIsGameOver(false)\n  }\n\n  const fetchItems = async () => {\n    setLoading(true)\n\n    const arr = []\n    for (let i=1;i<=level;i++) {\n      arr.push(i)\n    }\n    const arrRandom = arr.map(item => {\n      const randomNumber = Math.floor(Math.random()*672) + 1\n      return randomNumber\n    })\n\n    const params = arrRandom.join(',')\n    const response = await fetch(`${baseUrl}${params}`)\n    const data = await response.json()\n    setItems(data)\n    setLoading(false)\n  } \n\n  useEffect(() => {\n    if(clickedItems.length === level) {\n      setIsGameOver(true)\n    }\n  },[clickedItems, level])\n\n  useEffect(() => {\n    fetchItems()\n  }, [level])\n\n  useEffect(() => {\n    if(score > bestScore) {\n      setBestScore(score)\n    }\n  },[score, bestScore])\n\n  if(loading) {\n    return (\n      <>\n        <Header score={score} bestScore={bestScore} />\n        <section className='container'>\n          <h2 className='loading'>loading...</h2>\n        </section>\n      </>\n    )\n  }\n\n  if(isGameOver) {\n    return (\n      <>\n        <Header score={score} bestScore={bestScore} />\n        <section className='container'>\n          <GameOver resetGame={resetGame} clickedItems={clickedItems} level={level} nextLevel={nextLevel} setLevel={setLevel} />\n        </section>\n      </>\n    )\n  }\n\n  return (\n    <div>\n      <Header score={score} bestScore={bestScore} />\n      <section className=\"container\">\n        {items.map((item) => {\n        const orderNumber = Math.floor(Math.random() * 12)\n        return <Card key={item.id} item={item} handleClick={handleClick} orderNumber={orderNumber} />\n      })}\n      </section>\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}